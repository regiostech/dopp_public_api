<script>
  // Example for using DOPP API to display discounts within quick order forms in the Trade theme.
  //
  // IMPORTANT: THIS SCRIPT IS *NOT AN OFFICIAL FEATURE OF OUR APP*. IT IS AN EXAMPLE FOR CREATING YOUR
  // OWN CUSTOM CODE INTEGRATIONS. UNFORTUNATELY, WE CANNOT CONTINUE TO UPDATE THIS SCRIPT. THANK YOU
  // FOR YOUR UNDERSTANDING.
  //
  // https://github.com/regiostech/dopp_public_api/blob/main/trade_quick_order_example.liquid
  function initQuickOrderDiscounts() {
    // You can edit these to control the behavior.
    const settings = {
      // Whether to add a sale badge to each discounted variant's price in the quick order form
      showBadge: true,
      // Whether to add a sale badge on mobile screens.
      showBadgeOnMobile: false,
      // Whether to show a discount description below each discounted variant's price.
      showDescription: true,
      // Whether to show a discount description on mobile screens.
      showDescriptionOnMobile: true,
      // How long (in ms) to wait after the Trade theme reloads a row to display discounted prices again.
      delay: 1000,
      // This text will appear after a "/" on discounted prices, indicating that a price applies to unit.
      // If your store is not in English, consider changing this.
      unitString: "ea",
    };
  
    if (!window.RegiosDOPP_ProductPage) {
      console.error('"Product Page Discount" app block is required to display discounts within the quick order form.');
      return;
    }

    const quickOrderListId = '{{ section.id }}-{{ product.id }}';
    const quickOrderList = document.querySelector(`quick-order-list#${quickOrderListId}`);
    
    if (!quickOrderList) {
      console.error(`Could not find quick-order-list with ID ${quickOrderListId}`);
      return;
    } else {
      console.info(`Displaying discounts within quick-order-list#${quickOrderListId} with these settings`, settings);
    }
    
    const updateQuickOrderDiscounts = async (api) => {
      let anyObserverFired = false;
      
      // Update each row      
      for (const variant of window.RegiosDOPP_ProductPage.variants) {
        
        const quickOrderListRowSelector = `.variant-item[data-variant-id="${variant.id}"]`;
        const quickOrderListRow = quickOrderList.querySelector(quickOrderListRowSelector);
        if (!quickOrderListRow) {
          console.error(`Quick order list row for variant ${variant.id} not found: ${quickOrderListRowSelector}`);
          return;
        }
        
        const result = await api.calculateDiscountedPrices({
          ...window.RegiosDOPP_ProductPage,
          variantId: variant.id,
          // We are showing unit prices, so always use quantity of 1
          quantity: 1,
        });
        console.log(`Result for variant ${variant.id}`, result);
  
        // Display the discounted prices. The pricing elements in the quick order list are different from on the
        // product/collection page, so we have to implement this manually.
        const {salePrice, regularPrice, description, badge} = result;
        const discountWasApplied = salePrice.amount < regularPrice.amount;

        // In the Trade quick order list, there are 2 elements that must be updated with pricing info:
        // - .variant-item__price (visible on large screens)
        // - .variant-item__details (visible on small screens)
        const pricingElements = [];
        
        const variantItemPrice = quickOrderListRow.querySelector('.variant-item__price');
        const variantItemDetails = quickOrderListRow.querySelector('.variant-item__details');
  
        if (!variantItemPrice && !variantItemDetails) {
          console.error(`Quick order list row for variant ${variant.id} lacks a .variant-item__price or .variant-item__details`, quickOrderListRow);
          continue;
        }

        // Unlike .variant-item__price, the .variant-item__details has other elements besides price, so we can't just replace them all.
        let variantItemDetailsPrice = variantItemDetails?.querySelector('.variant-item__discounted-prices') || variantItemDetails?.querySelector('.price');
  
        if (!discountWasApplied) {
          const html = `
          <span class="price" data-created-by-regios-quick-order-form-hook>${salePrice.formatted}/ea</span>
          `;
          variantItemPrice.innerHTML = html;
          
          if (variantItemDetailsPrice) {
            variantItemDetailsPrice.outerHTML = html;
          }
        } else {
          const html = `
          <dl class="variant-item__discounted-prices">
            <dt class="visually-hidden">
              Regular price
            </dt>
            <dd>
              <s class="variant-item__old-price price price--end" data-created-by-regios-quick-order-form-hook>
                ${regularPrice.formatted}
              </s>
            </dd>
            <dt class="visually-hidden">
              Sale price
            </dt>
            <dd class="price"><span class="price" data-created-by-regios-quick-order-form-hook>${salePrice.formatted}/${settings.unitString}</span></dd>            
          </dl>
          `;
          variantItemPrice.innerHTML = html;
          
          if (variantItemDetailsPrice) {
            variantItemDetailsPrice.outerHTML = html;
            variantItemDetailsPrice = variantItemDetails?.querySelector('.variant-item__discounted-prices') || variantItemDetails?.querySelector('.price');
          }


          const elementsToShowBadgeOrDescIn = [variantItemPrice];
          
          if (variantItemDetailsPrice) {
            elementsToShowBadgeOrDescIn.push(variantItemDetailsPrice);
          }

          for (const element of elementsToShowBadgeOrDescIn) {
            const isMobile = element === variantItemDetailsPrice;
            
            if (settings.showBadge && (!isMobile || settings.showBadgeOnMobile)) {
              const badgeEl = document.createElement('span');
              const discountedPricesRoot = element.classList.contains("variant-item__discounted-prices") ? element : element.querySelector('.variant-item__discounted-prices');
              if (discountedPricesRoot) {
                discountedPricesRoot.append(badgeEl);
                badgeEl.outerHTML = `
                <span class="badge price__badge-sale color-scheme-5" style="${badge.css}; margin-left: 1em">
                  ${badge.html}
                </span>
                `;
              } else {
                console.log("Element lacks .variant-item__discounted-prices child; skipping");
              }
            }
  
            if (settings.showDescription && (!isMobile || settings.showDescriptionOnMobile)) {
              const doppDesc = element.querySelector('.regios-dopp-description') || document.createElement('div');
              doppDesc.setAttribute('class', 'regios-dopp-description');
              doppDesc.innerHTML = description.html;
              doppDesc.style.cssText = description.css;
              element.append(doppDesc);
            }
          }
        }
  
        console.info(`Quick order list row for variant ${variant.id} prices updated`, { discountWasApplied, quickOrderListRow, result, variantItemPrice, variantItemDetailsPrice });
  
        // The theme completely overwrites the table contents when the quantity is updated. Let's listen for this.
        const mo = new MutationObserver((mutations, observer) => {
          if (anyObserverFired) {
            observer.disconnect();
            return;
          }
          
          for (const mutation of mutations) {
            if ('removedNodes' in mutation) {
              const {removedNodes} = mutation;
              
              // Prevent infinite loops by only firing if an element we created was removed.
              const triggerSelector = '[data-created-by-regios-quick-order-form-hook]';
              // const trigger = Array.from(mutation.removedNodes).find((el) => el instanceof Element && el.matches(triggerSelector));
              const trigger = Array.from(mutation.removedNodes).includes(variantItemPrice);
  
              if (trigger) {     
                // Only listen once.
                observer.disconnect();
                anyObserverFired = true;
                // Update discounts on the page.
                console.info(`Quick order form {{ section.id }}-{{ product.id }} price for variant ${variant.id} reloaded`, { variant, mutations, observer, trigger });
                
                // Try to avoid race condition by delaying this operation.
                setTimeout(() => {
                  updateQuickOrderDiscounts(api);
                }, settings.delay);
                return;
              } else {
                // console.info(`Quick order form {{ section.id }}-{{ product.id }} did not reload`, { removedNodes: Array.from(removedNodes) });
              }
            }
          }
        });
        mo.observe(
          quickOrderListRow,
          {
            childList: true,
            subtree: true,
          }
        );
      }
    }
  
    // Make sure this logic runs after the DOPP API has loaded.
    if (window.RegiosDOPP?.api?.v0) {
      updateQuickOrderDiscounts(window.RegiosDOPP.api.v0);
    } else {
      window.addEventListener("regios-dopp:api-initialized", (e) => {
        updateQuickOrderDiscounts(e.detail.api);
      });
    }
  }
  
  // Make sure this runs after the page loads.
  if (document.readyState !== "loading") {
    initQuickOrderDiscounts();
  } else {
    document.addEventListener("DOMContentLoaded", initQuickOrderDiscounts);
  }
</script>
